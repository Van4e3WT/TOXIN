mixin dropdown-absolute__counter-block(defVal, key)
  .dropdown-absolute__counter-block
    .dropdown-absolute__minus -
    .dropdown-absolute__counter=defVal ? defVal[key] : 0
    .dropdown-absolute__plus +

//- @param {object} with properties
//- wordforms - {Array<string>} / {Array<Array[string]>}
//- items - {Array<string>} dropdown's elements
//- isOpen - {boolean} by default false
//- addedClasses - {string} classes for dropdown-absolute
//- defaultValues - {Array<number>} / {Array<string>} default values items
mixin dropdown-absolute(props)
  - var { wordforms, items, isOpen, defaultText, addedClasses, defaultValues } = props
  if (wordforms[0] instanceof Array)
    .dropdown-absolute(several-word-forms, class=`${addedClasses}`)
      input.dropdown-absolute__output(default=defaultText, type="text", readonly)
      .dropdown-absolute__list(class= isOpen ? "dropdown-absolute__list_active" : "")
        each item, key in wordforms
              .dropdown-absolute__item(wordforms=item.join(', '))
                .dropdown-absolute__item-type=item[1]
                +dropdown-absolute__counter-block(defaultValues, key)
  else
      .dropdown-absolute(wordforms=wordforms.join(', '), class=`${addedClasses}`)
        input.dropdown-absolute__output(default=defaultText, type="text", readonly)
        .dropdown-absolute__list(class= isOpen ? "dropdown-absolute__list_active" : "")
          each item, key in items
            .dropdown-absolute__item
              .dropdown-absolute__item-type=item
              +dropdown-absolute__counter-block(defaultValues, key)
          .dropdown-absolute__buttons
            .dropdown-absolute__clear-btn.button_skeleton-button Очистить
            .dropdown-absolute__apply-btn.button_skeleton-button Применить
